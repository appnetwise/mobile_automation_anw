on:
  push:
    branches:
       - master
 
jobs:
  test:
    runs-on: macos-latest
    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_AVD_HOME: ${{ github.workspace }}/.config/.android/avd
      JAVA_HOME: /Library/Java/JavaVirtualMachines/adoptopenjdk-17.jdk/Contents/Home
      JAVA_HOME_11_X64: /Library/Java/JavaVirtualMachines/adoptopenjdk-17.jdk/Contents/Home
      APPIUM_JS_PATH: /home/runner/work/mobile_automation_anw/mobile_automation_anw/node_modules/appium/build/lib/main.js
      NODE_PATH: /usr/local/bin/node
  
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

 
      - name: Set up Java JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

          #----
      - name: Install Appium and dependencies
        run: |
          npm install -g appium@v1.22
          npm install -g appium-doctor
          appium-doctor --android
        shell: bash
        
      - name: Check Port Numbers in Use
        run: lsof -i -P -n | grep LISTEN
        shell: bash
    
      - name: Start Appium server
        run: appium -a 127.0.0.1 -p 0 &
        
      - name: Wait for Appium server to start
        run: sleep 10
          
      - name: Check Port Numbers in Use
        run: lsof -i -P -n | grep LISTEN
        shell: bash

      - name: Capture Appium port for the first server
        run: echo "APPIUM_PORT_1=$(lsof -i -P -n | grep LISTEN | grep appium | awk 'NR==1{print $9}' | cut -d ':' -f 2)" >> $GITHUB_ENV

 
      - name: Print ANDROID_SDK_ROOT path
        run: echo ${{ env.ANDROID_SDK_ROOT }}
 
 
      - name: Download Android SDK tools (using custom location)
        uses: android-actions/setup-android@v3
        with:
          sdk_root: ${{ env.ANDROID_SDK_ROOT }}
 
      - name: Install additional packages (modify list as needed)
        run: sdkmanager --install 'build-tools;29.0.0' 'platform-tools' 'platforms;android-29' 'platforms;android-28'  'cmdline-tools;latest' 'emulator'
 
 
      - name: Verify ANDROID_SDK_ROOT
        run: |
          echo $ANDROID_HOME
          echo $ANDROID_SDK_ROOT
          ls -la $ANDROID_SDK_ROOT
          ls -la $ANDROID_SDK_ROOT/cmdline-tools
 
 
      - name: Set up Android SDK and PATH
        run: |
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platforms" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/tools" >> $GITHUB_PATH
          echo "y" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-29" "platforms;android-28" "emulator" # Add any additional packages
      
 
 
      - name: Install system image (android-29;google_apis;x86_64)
        run: |
          echo "y" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "system-images;android-29;google_apis;x86_64" "system-images;android-28;google_apis;x86_64"  
      
      - name: Update Android SDK Manager
        run: $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --update --sdk_root=$ANDROID_SDK_ROOT
 
      - name: List Install system image
        run: |
          ls -la $ANDROID_SDK_ROOT
          ls -la $ANDROID_SDK_ROOT/system-images/android-29
          ls -la $ANDROID_SDK_ROOT/system-images/android-28
 
      - name: List Available SDK Packages
        run: $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list --sdk_root=$ANDROID_SDK_ROOT
 
 
      - name: Start ADB server
        run: adb start-server  # Assuming ADB is installed and in PATH
 
      - name: Create AVD
        run: |
          ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin  
          echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd --force --name emulator-5554 --package 'system-images;android-29;google_apis;x86_64' --device 'pixel' --sdcard 512M
          echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd --force --name emulator-5556 --package 'system-images;android-29;google_apis;x86_64' --device 'pixel' --sdcard 512M
 
 
      - name: List emulator devices (Force Refresh)
        run: avdmanager list avd
 
 
      - name: List emulator devices
        run: | 
          $ANDROID_SDK_ROOT/emulator/emulator -list-avds
          exit 0  # Exit with code 0 indicating success
 
 
      - name: Install Appium dependencies
        run: |
          cd android
          mvn install -DskipTests

      - name: Build the Android app (APK)
        run: |
          cd android
          mvn clean install
 
      - name: Start Emulator Device
        run: |
          ($ANDROID_SDK_ROOT/emulator/emulator -avd emulator-5554 -port $APPIUM_PORT_1 -no-snapshot -no-boot-anim -no-window -http-proxy localhost -no-audio  -memory 2048 -wipe-data -verbose &) &
          sleep 500
      
      - name: Start another Appium server
        run: appium -a 127.0.0.1 -p 0 &
        
      - name: Wait for Appium server to start
        run: sleep 10
          
      - name: Check Port Numbers in Use
        run: lsof -i -P -n | grep LISTEN
        shell: bash

      - name: Capture Appium port for the second server
        run: echo "APPIUM_PORT_2=$(lsof -i -P -n | grep LISTEN | grep appium | awk 'NR==2{print $9}' | cut -d ':' -f 2)" >> $GITHUB_ENV

      - name: Start Another Emulator Device
        run: |
          ($ANDROID_SDK_ROOT/emulator/emulator -avd emulator-5556 -port $APPIUM_PORT_2 -no-snapshot -no-boot-anim -no-window -http-proxy localhost -no-audio  -memory 2048 -wipe-data -verbose &) &
          sleep 500
    
      - name: Verify Emulator Status
        run: adb devices
        shell: bash

      - name: Verify adb Connection emulator-5554
        run: adb -s emulator-5554 shell echo "Connection successful"
        shell: bash
 
      - name: Verify adb Connection emulator-5556
        run: adb -s emulator-5556 shell echo "Connection successful"
        shell: bash
 
      - name: Check Emulator Logs
        run: adb logcat | grep -iE "error|warning" >> emulator_logs.txt &
        shell: bash
 
      - name: Install Appium and dependencies
        run: |
          npm install -g appium@v1.22
          npm install -g appium-doctor
          appium-doctor --android
        shell: bash
        
      - name: Check Port Numbers in Use
        run: lsof -i -P -n | grep LISTEN
        shell: bash
    
      - name: Start Appium server
        run: appium -a 127.0.0.1 -p 0 &
        
      - name: Wait for Appium server to start
        run: sleep 10
          
      - name: Check Port Numbers in Use
        run: lsof -i -P -n | grep LISTEN
        shell: bash

      - name: Start another Appium server
        run: appium -a 127.0.0.1 -p 0 &
        
      - name: Wait for Appium server to start
        run: sleep 10
          
      - name: Check Port Numbers in Use
        run: lsof -i -P -n | grep LISTEN
        shell: bash
        
      - name: Run Appium tests
        run: |
          pwd
          cd android
          mvn clean test -Dsurefire.suiteXmlFiles=regression.xml -f pom.xml -X
 
      - name: Upload success reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports-success
          path: android/reports
 
      - name: Upload failure reports (optional)
        uses: actions/upload-artifact@v2
        with:
          name: test-reports-failure
          path: android/reports
        if: failure()
 
      - name: Stop emulator (optional)
        run: adb emu kill &  # Background process to avoid interrupting tests
